# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      imagePullSecrets:
         - name: registry-abel
      containers:
      - name: frontend
        image: registry.digitalocean.com/abel/frontend:latest
        resources:
          limits:
            memory: "2512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
        ports:
        - containerPort: 3000
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
---
# Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      imagePullSecrets:
       - name: registry-abel
      containers:
      - name: worker
        image: registry.digitalocean.com/abel/worker:latest
        env:
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: secrets
              key: AWS_REGION
        - name: AWS_SQS_QUEUE_URL
          valueFrom:
            secretKeyRef:
              name: secrets
              key: AWS_SQS_QUEUE_URL
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: secrets
              key: AWS_SECRET_ACCESS_KEY
        resources:
          limits:
            memory: "2512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
---
# API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      imagePullSecrets:
        - name: registry-abel
      containers:
      - name: api
        image: registry.digitalocean.com/abel/api:latest
        env:
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: secrets
              key: AWS_REGION
        - name: AWS_SQS_QUEUE_URL
          valueFrom:
            secretKeyRef:
              name: secrets
              key: AWS_SQS_QUEUE_URL
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: secrets
              key: AWS_SECRET_ACCESS_KEY
        resources:
          limits:
            memory: "2512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
        ports:
        - containerPort: 9002
---
# API Service
apiVersion: v1
kind: Service
metadata:
  name: api-service
spec:
  type: NodePort
  selector:
    app: api
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9002
---
# Ingress Resource
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: guilhermeabel-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-cache: "off"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate";
      more_set_headers "Pragma: no-cache";
      more_set_headers "Expires: 0";
spec:
  ingressClassName: nginx
  rules:
  - host: guilhermeabel.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api-service
            port:
              number: 80
      
